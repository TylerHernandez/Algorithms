%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% CMPT 435
% Fall Semester
% Assignment Two
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Short Sectioned Assignment
% LaTeX Template
% Version 1.0 (5/5/12)
%
% This template has been downloaded from: http://www.LaTeXTemplates.com
% Original author: % Frits Wenneker (http://www.howtotex.com)
% License: CC BY-NC-SA 3.0 (http://creativecommons.org/licenses/by-nc-sa/3.0/)
% Modified by Alan G. Labouseur  - alan@labouseur.com
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%----------------------------------------------------------------------------------------
%	PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass[letterpaper, 10pt,DIV=13]{scrartcl} 

\usepackage[T1]{fontenc} % Use 8-bit encoding that has 256 glyphs
\usepackage[english]{babel} % English language/hyphenation
\usepackage{amsmath,amsfonts,amsthm,xfrac} % Math packages
\usepackage{sectsty} % Allows customizing section commands
\usepackage{graphicx}
\usepackage[lined,linesnumbered,commentsnumbered]{algorithm2e}
\usepackage{listings}
\usepackage{parskip}
\usepackage{lastpage}
\usepackage{tabularx}

\allsectionsfont{\normalfont\scshape} % Make all section titles in default font and small caps.

\usepackage{fancyhdr} % Custom headers and footers
\pagestyle{fancyplain} % Makes all pages in the document conform to the custom headers and footers

\fancyhead{} % No page header - if you want one, create it in the same way as the footers below
\fancyfoot[L]{} % Empty left footer
\fancyfoot[C]{} % Empty center footer
\fancyfoot[R]{page \thepage\ of \pageref{LastPage}} % Page numbering for right footer

\renewcommand{\headrulewidth}{0pt} % Remove header underlines
\renewcommand{\footrulewidth}{0pt} % Remove footer underlines
\setlength{\headheight}{13.6pt} % Customize the height of the header

\numberwithin{equation}{section} % Number equations within sections (i.e. 1.1, 1.2, 2.1, 2.2 instead of 1, 2, 3, 4)
\numberwithin{figure}{section} % Number figures within sections (i.e. 1.1, 1.2, 2.1, 2.2 instead of 1, 2, 3, 4)
\numberwithin{table}{section} % Number tables within sections (i.e. 1.1, 1.2, 2.1, 2.2 instead of 1, 2, 3, 4)

\setlength\parindent{0pt} % Removes all indentation from paragraphs.

\binoppenalty=3000
\relpenalty=3000

%----------------------------------------------------------------------------------------
%	TITLE SECTION
%----------------------------------------------------------------------------------------

\newcommand{\horrule}[1]{\rule{\linewidth}{#1}} % Create horizontal rule command with 1 argument of height

\title{	
   \normalfont \normalsize 
   \textsc{CMPT 435 - Fall 2022 - Dr. Labouseur} \\[10pt] % Header stuff.
   \horrule{0.5pt} \\[0.25cm] 	% Top horizontal rule
   \huge Assignment Five  \\     	    % Assignment title
   \horrule{0.5pt} \\[0.25cm] 	% Bottom horizontal rule
}

\author{Tyler Hernandez \\ \normalsize Tyler.Hernandez1@marist.edu}

\date{\normalsize\today} 	% Today's date.

\begin{document}
\maketitle % Print the title

\ 
\ 
\ 
\begin{center}
    This page left partially blank intentionally.
\end{center}

\pagebreak

%----------------------------------------------------------------------------------------
%   start PROBLEM ONE
%----------------------------------------------------------------------------------------
\section{Main Method}

\lstset{numbers=left, numberstyle=\tiny, stepnumber=1, numbersep=5pt, basicstyle=\footnotesize\ttfamily}
\begin{lstlisting}[frame=single, ]
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Main {

    // Driver for Assignment 5.
    public static void main(String[] args) throws Exception {

        Reader reader = new Reader("./graphs2.txt");

        String line = reader.getNextLine();
        String[] words;
        ArrayList<Graph> graphs = new ArrayList<>();

        Graph g = new Graph(); // Initialize so our compiler will stop complaining.

        // Flag to make sure while loop runs one time after reader flags end of file
        boolean readingLastLine = false;

        while (!readingLastLine) { // Until we've reached the end of the file.

            if (reader.endOfFile) {
                readingLastLine = true; // We've reached end of file, we can stop looping.
            }
            // System.out.println(line);

            // Take our next line of text and put each word into an array.
            line = line.replaceAll("\n", "");
            line = line.replaceAll("  ", " "); // Nice try, professor.
            words = line.split(" ");

            // Now, we can determine which action to take strictly based on sentence length!

            if (words.length == 0) {
                // Blank line.
            } else if (words[0].equals("--")) {
                // Do nothing because this is a comment.
            } else if (words.length == 2) {
                // Save previous graph to our list, if it was not the default graph.
                if (!g.isEmpty()) {
                    graphs.add(g);
                }

                // NEW GRAPH command
                g = new Graph();
            } else if (words.length == 3) {
                // ADD VERTEX (INT) command
                g.addVertex(Integer.parseInt(words[2]));
            } else if (words.length == 6) {
                // ADD EDGE (INT) - (INT) (WEIGHT) command
                g.addEdge(Integer.parseInt(words[2]), Integer.parseInt(words[4]), Integer.parseInt(words[5]));
            }

            // Grab the next line so we can keep going!
            line = reader.getNextLine();
        } // end of while.

        // Since the final graph never reaches our 'save' in while loop.
        graphs.add(g);

        // For each graph,
        for (Graph graph : graphs) {
            System.out.println("--------------------------------------------");
            System.out.println("GRAPH: ");

            // display it's adjacency list!
            System.out.println("Adjacency List\n");
            graph.printList();
            System.out.println("--------------------------------------------");
            int[] distances = SSSP(graph, 1);

            for (int i = 0; i < distances.length; i++) {
                System.out.println("1 -> " + (i + 1) + " cost is " + distances[i]);
            }

            System.out.println("\n");

        }
        System.out.println("\n\n\n");

        // Part 2: Spice.txt
        ArrayList<Spice> spices = new ArrayList<>(); // will hold all spices.
        ArrayList<Integer> commands = new ArrayList<>();

        // First, read in all spices into spices arraylist and gather all 'knapsack
        // capacity' commands.
        reader = new Reader("./spice.txt");
        line = reader.getNextLine();
        readingLastLine = false; // reset flag from previous use.
        while (!readingLastLine) { // Until we've reached the end of the file.

            if (reader.endOfFile) {
                readingLastLine = true; // We've reached end of file, we can stop looping.
            }

            line = line.replaceAll("\n", "");
            line = line.replaceAll(";", ""); // gets rid of those semicolons.
            line = line.replaceAll("  ", " "); // There's a lot of double
            line = line.replaceAll("  ", " "); // spaces we need to get
            line = line.replaceAll("  ", " "); // rid of :)
            line = line.replaceAll("  ", " "); // ... and this ones for good luck.
            words = line.split(" ");

            if (words.length == 0) {
                // Blank line.
            } else if (words[0].equals("--")) {
                // Do nothing because this is a comment.
            } else if (words.length == 4) {
                // Declaring commands here.
                // Knapsack capacity = (int) command.
                commands.add(Integer.parseInt(words[3]));
            } else if (words.length == 10) {
                // Declaring spices here.
                // 3 : (name), 6 : (price), 9 : (quantity).
                spices.add(new Spice(words[3], words[6], words[9]));
            }

            line = reader.getNextLine();
        }

        // For each command (quantity), run our fractionalKnapsack algorithm.
        for (int command : commands) {
            Spice[] bag = fractionalKnapsack(spices, command);
            printSpices(bag);
        }

    }

     // This is not my algorithm, I am using it for this assignment's purpose and
    // have modified it for my better understanding and to match my data set.
    // Here is the original source:
    // https://www.geeksforgeeks.org/bellman-ford-algorithm-dp-23/
    public static int[] SSSP(Graph graph, int src) {
        // Grab the length of our vertices and links to know how many options we have at
        // a given moment.
        int lengthOfVerticesList = graph.vertices.size();
        int lengthOfLinksList = graph.links.size();
        int dist[] = new int[lengthOfVerticesList];

        // First, set the distance from source to every other vertices as
        // Integer.MAX_VALUE so we don't blindly choose an unexplored path.
        for (int i = 0; i < lengthOfVerticesList; i++) {
            dist[i] = Integer.MAX_VALUE;
        }

        dist[src - 1] = 0;

        // Next, check each edge's weight to find the single shortest path.
        for (int i = 1; i < lengthOfVerticesList; i++) {
            for (int j = 0; j < lengthOfLinksList; j++) {
                int u = graph.links.get(j).sourceId - 1;
                int v = graph.links.get(j).destinationId - 1;
                int weight = graph.links.get(j).weight;
                if (dist[u] != Integer.MAX_VALUE
                        && dist[u] + weight < dist[v])
                    dist[v] = dist[u] + weight;
            }
        }

        // Lastly, we need to ensure a negative weight cycle is not found or else we
        // will infinitely find "shorter" paths every time.
        for (int j = 0; j < lengthOfLinksList; j++) {
            int u = graph.links.get(j).sourceId - 1;
            int v = graph.links.get(j).destinationId - 1;
            int weight = graph.links.get(j).weight;
            if (dist[u] != Integer.MAX_VALUE
                    && dist[u] + weight < dist[v]) {
                System.out.println(
                        "Error: Graph contains negative weight cycle");
                return dist;
            }
        }
        return dist;
    }

    // Sort by the highest value per unit and take them in that order.
    public static Spice[] fractionalKnapsack(ArrayList<Spice> spices, int quantity) {

        // Comparator for comparing spices by unit price.
        Comparator<Spice> compareByUnitPrice = new Comparator<Spice>() {
            @Override
            public int compare(Spice spice1, Spice spice2) {
                return spice2.compareTo(spice1);
            }
        };

        // Sort spices by unit price.
        Collections.sort(spices, compareByUnitPrice);

        // Initialize bag to be quantity length
        Spice[] myBag = new Spice[quantity];
        int counter = 0; // Counter to place spices in order of value and prevent out of bounds
                         // exception.

        // Loop through spices and grab the first 'quantity' many.
        for (Spice spice : spices) {
            if (counter == quantity) {
                break;
            } else {

                // Keep appending this spice until it either runs out or we don't have anymore
                // space.
                double spiceQuantity = spice.quantity;
                while ((spiceQuantity > 0) && (counter < quantity)) {

                    spiceQuantity -= 1;
                    myBag[counter] = spice;
                    counter++;
                }

            }
        }

        return myBag;

    }
\end{lstlisting}

\subsection{Main Method}

For this assignment there were two milestones. First, I was given a graph text file which I needed to parse, store, and run Bellman-Ford's Single Source Shortest Path algorithm on given the first vertex. Then, I was given a spices text file which I also needed to parse, store, and run the fractional knapsack algorithm in order to produce maximum results. 

Bellman-Ford's SSSP algorithm's asymptotic running time complexity is big O of V * E, where V is how many vertices we have in the graph, and E is how many edges are in the graph. This makes sense because the algorithm works by not having to traverse the same path more than once, since every time it visits a path it will overwrite it's initial "max distance" to the real distance in the weighted graph.

Next, for the Fractional Knapsack algorithm, the asymptotic running time complexity is big O of n * log n. This is because once the algorithm sorts the spices in order of what will give the highest value per capacity, all it needs to do is retrieve the first 'bag capacity' elements. 

Some of the challenges I faced with this assignment included parsing the files which could contain extra spaces at any given moment. I tackled this problem by getting rid of double triple and quadruple spaces before I split the words into an array for processing. 

\newpage

\subsection{Link}
\begin{lstlisting}[frame=single, ] 
// Wrapper for sourceId, weight, and destination link.
public class Link {

    public int sourceId;
    public int weight;
    public int destinationId;

    public Link(int sourceId, int weight, int destinationId) {
        this.sourceId = sourceId;
        this.weight = weight;
        this.destinationId = destinationId;
    }

    public String toString() {
        return ("--(" + this.weight + ")-->" + this.destinationId);
    }

}
\end{lstlisting}

In order to run bellman ford's algorithm, I needed to find a way to hold each edge's information. This meant recording the source of the directional edge, the destination of the edge, and the weight. I accomplished this with my 'Link' class which is a mere wrapper for the information. Lastly, it's toString was helpful for visualizing the graph in the adjacency list. 

\newpage

\subsection{Spice}
\begin{lstlisting}[frame=single, ]  
public class Spice implements Comparable<Spice> {

    public String name;
    public double price;
    public double quantity;
    public double unitPrice;

    public Spice(String name, String price, String quantity) {

        // Parse our strings into proper data types.
        this.name = name;
        this.price = Double.parseDouble(price);
        this.quantity = Double.parseDouble(quantity);
        this.unitPrice = this.price / this.quantity;
    }

    @Override
    public int compareTo(Spice spice) {
        if (this.unitPrice > spice.unitPrice) {
            return 1;
        } else if (this.unitPrice == spice.unitPrice) {
            return 0;
        } else {
            return -1;
        }
    }

    public String toString() {
        return this.name + ": $" + this.unitPrice;
    }

}

\end{lstlisting}
    
This spice class was also used as a wrapper but for spices read in by our parser. Each spice contains a name, bulk cost, and quantity. Rather than having to retrieve the spice's unit price during our knapsack algorithm, I decided to calculate unit price in the constructor: the second we could. While this resulted in storing extra information, this allowed for ease when retrieving the unit price in our algorithm. Looking back at it, it might have made more sense to just store the unit price rather than the available cost summation.

\subsection{Graph}
\begin{lstlisting}[frame=single, ] 
import java.util.ArrayList;

public class Graph {

    public ArrayList<Vertex> vertices;
    public ArrayList<Link> links;
    private boolean isEmpty;
    private int highestIdFound;

    public Graph() {
        this.vertices = new ArrayList<>();
        this.links = new ArrayList<>();
        this.isEmpty = true;
    }

    public Vertex findVertexById(int id) {

        // Loop through vertices list to find a vertex with our desired id.
        Vertex v;
        for (int i = 0; i < vertices.size(); i++) {
            v = vertices.get(i);
            if (v.getId() == id) {
                return v;
            }
        }

        // Vertex does not exist.
        return new Vertex(-1);
    }

    // Given an id, creates a vertex and adds it to the graph.
    public void addVertex(int id) {
        this.isEmpty = false;

        if (id > this.highestIdFound) {
            this.highestIdFound = id;
        }

        if (findVertexById(id).id == id) { // if we can find it's id (as non negative 1)
            System.out.println("The vertex ID " + id + " already exists.");
            return;
        }

        Vertex vertex = new Vertex(id);

        vertices.add(vertex);
    }

    // Takes in two vertex id's and adds themselves to each others neighbor lists.
    public void addEdge(int vertex1, int vertex2, int weight) {
        // Create a link from vertex 1 to vertex 2.
        Link link = this.findVertexById(vertex1).addLink(vertex2, weight);
        this.links.add(link);
    }

    // Prints out adjacency list representation for each vertex in graph.
    // Initially, I was going to return it similar to createMatrix, however this was
    // a lot easier and more efficient as I do not have to loop once again for
    // display.
    public void printList() {

        // Grab each vertex associated with each other and set their coordinates to 1.
        for (Vertex v : this.vertices) {
            int vertexId = v.getId();

            System.out.println("[" + vertexId + "]" + " ->" + v.getLinks().toString());
        }

    }

    public boolean isEmpty() {
        return this.isEmpty;
    }

    public String toString() {
        String retStr = "";
        for (Vertex v : vertices) {
            retStr += "   Vertex: " + v.id + "\n";
            retStr += v.toString();
            retStr += "\n\n";
        }
        return retStr;
    }

}


\end{lstlisting}

Lastly, this is my graph class! In order to implement direction and weights, I added a list of links and changed my addEdge function to only add links in one direction. Because of my previous code's modularity, there were minimal changes needed to implement direction in the graph itself. 

All in all, this assignment allowed me to better understand both Bellman-Ford's SSSP algorithm and the fractional knapsack algorithm by having experimented running it on custom data sets! 

\newpage



\end{document}
